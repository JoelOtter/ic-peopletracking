#!/usr/bin/env python
import argparse
import json
from track.track import Tracker


def get_type_error(text):
    return argparse.ArgumentTypeError(text)


def check_positive(index):
    error_msg = "Feed index must be at least 0"

    try:
        index_n = int(index)
    except ValueError:
        raise get_type_error(error_msg)

    if index_n < 0:
        raise get_type_error(error_msg)

    return int(index)


def check_dimension(size):
    error_msg = "Values for sizes must be above 0"

    try:
        size_n = int(size)
    except ValueError:
        raise get_type_error(error_msg)

    if size_n < 1:
        raise get_type_error(error_msg)

    return size_n


def check_video(file):
    if not file.endswith('.avi') and not file.endswith('.mp4'):
        raise argparse.ArgumentTypeError("Expected .avi or .mp4 video file")
    return file


parser = argparse.ArgumentParser(
    description='Runs tracking analysis of humans in the given video')

parser.add_argument('-v', '--video', type=check_video,
                    help='path to video file')
parser.add_argument('-l', '--live', type=check_positive,
                    help='index for webcam, starts from 0')
parser.add_argument('--height', type=check_dimension,
                    help='resize feed to given height')
parser.add_argument('--width', type=check_dimension,
                    help='resize feed to given width')
parser.add_argument('--display-video',
                    help='displays a graphical display of tracking',
                    action='store_true',
                    default=False)
parser.add_argument('--paused',
                    help='start the display paused',
                    action='store_true',
                    default=False)
parser.add_argument('--dump-json',
                    help='dumps json to standard out',
                    action='store_true')

args = parser.parse_args()

if args.live is None and args.video is None:
    parser.error("Must specify live feed or video")

if args.live is not None and args.video is not None:
    parser.error("Specify either live feed or video")

tracker = Tracker(
    args.video or args.live,
    width=args.width or 0,
    height=args.height or 0,
    display=args.display_video,
    paused=args.display_video & args.paused
)

data = tracker.analyse()
if args.dump_json:
    print json.dumps(data)
